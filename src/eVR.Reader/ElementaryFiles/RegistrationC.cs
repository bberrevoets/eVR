/*
Copyright (c) 2013, Dienst Wegverkeer, RDW, All rights reserved. 

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 

• Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
• Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 
• Neither the name of the Dienst Wegverkeer, RDW,  nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. 

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

// <auto-generated />
namespace EVR.Reader
{
    using System;
    using System.Collections.Generic;
    using System.Security.Cryptography.X509Certificates;
    using System.Text;
    using System.Xml;
    using EVR.TLVParser;
    using EVR.Utils;

    public class RegistrationC : Registration
    {
        #region RegistrationB_Properties

        /// <summary>
        /// Datum eerste toelating
        /// </summary>
        public string B1 { get; private set; }

        /// <summary>
        /// Datum eerste inschrijving in Nederland
        /// </summary>
        public string B2 { get; private set; }

        /// <summary>
        /// Datum tenaamstelling in Nederland
        /// </summary>
        public string I { get; private set; }
    
        
        /// <summary>
        /// The version number of the CVO data
        /// </summary>
        public string CVOVersion 
        { 
            get; 
            private set; 
        }

        /// <summary>
        /// Bevat 0 of meer CVO's in string XML formaat
        /// </summary>
        public string[] CVOs
        { 
            get; 
            private set; 
        }
        #endregion

        /*
         * Retrieve the VIN from the CVO with number 'nr'.
         */
        public string VIN(int nr)
        {
            if (nr < 0 || nr >= CVOs.Length)
            {
                return null;
            }

            XmlDocument doc = new XmlDocument();
            doc.LoadXml(this.CVOs[nr]);

            XmlNodeList xnList = doc.SelectNodes("IndividualVehicleInformation/Body/CocDataGroup/VehicleIdentificationNumber");
            if (xnList != null && xnList.Count == 1)
            {
                return xnList[0].InnerXml;
            }
            return null;
        }

        public override void CreateSignature()
        {
            this.Signature = null;
        }

        public override void CreateDocumentSigner()
        {
            this.DS = null;
        }

        public override Encoding CharacterSetEncoding
        {
            get;
            set;
        }

        public RegistrationC(EFSOd EFSOd, X509Certificate2 CSCA, byte[] AID, CardReader cardReader, Encoding encoding)
            : base(EFSOd, CSCA, AID, cardReader, new byte[] { 0xD0, 0x21 })
        {
            this.CharacterSetEncoding = encoding;
            this.CVOVersion = this.DecodeBinary("1,BF8700|1,9F8701");
            this.B1 = this.DecodeString("1,BF8700|1,BF8710|1,9F8711"); // firstReg
            this.B2 = this.DecodeString("1,BF8700|1,BF8710|1,9F8712"); // firstRegEU
            this.I = this.DecodeString("1,BF8700|1,BF8710|1,9F8713"); // tenaamstelling
            
            TLV zippedXMLsTLV = this.GetTag("1,BF8700|1,BF8703|1,9F8705");
            int i = 1;
            List<string> cvos = new List<string>();

            while (zippedXMLsTLV != null)
            {
                cvos.Add(Helper.GUnzip2(zippedXMLsTLV.Value));

                i++;
                zippedXMLsTLV = this.GetTag(string.Format("1,BF8700|{0},BF8703|1,9F8705", i));
            }
            this.CVOs = cvos.ToArray();
        }
    }
}

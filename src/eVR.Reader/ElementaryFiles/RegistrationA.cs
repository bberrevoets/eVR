/*
Copyright (c) 2013, Dienst Wegverkeer, RDW, All rights reserved. 

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 

• Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
• Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 
• Neither the name of the Dienst Wegverkeer, RDW,  nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. 

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

// <auto-generated />
namespace EVR.Reader
{
    using System.Security.Cryptography.X509Certificates;
    using System;
    using System.Text;

    public class RegistrationA : Registration
    {
        #region RegistrationA_Properties
        /// <summary>
        /// Kenteken
        /// </summary>
        public string A { get; private set; }

        /// <summary>
        /// Meldcode
        /// </summary>
        public string A_Meldcode { get; private set; }

             
        /// <summary>
        /// C.1.1
        /// </summary>
        public string C11 { get; private set; }

        /// <summary>
        /// C.1.2
        /// </summary>
        public string C12 { get; private set; }

        /// <summary>
        /// C.1.3
        /// </summary>
        public string C13 { get; private set; }

        /// <summary>
        /// C.4
        /// </summary>
        public string C4 { get; private set; }

        /// <summary>
        /// DocumentNumber
        /// </summary>
        public string DocumentNumber { get; private set; }


        // Data on back of card
        // --------------------
        /// <summary>
        /// E Voertuigidentiticatienummer
        /// </summary>
        public string E { get; private set; }

        /// <summary>
        /// D.1 Merk
        /// </summary>
        public string D1 { get; private set; }

        /// <summary>
        /// D.2 Type
        /// </summary>
        public string D2 { get; private set; }

        /// <summary>
        /// D.3 Handelsbenaming
        /// </summary>
        public string D3 { get; private set; }

        /// <summary>
        /// K Typegoedkeuringsnummer
        /// </summary>
        public string K { get; private set; }

        /// <summary>
        /// F.1 Technische max.massa
        /// </summary>
        public string F1 { get; private set; }

        /// <summary>
        /// P.1 Cilinderinhoud
        /// </summary>
        public string P1 { get; private set; }

        /// <summary>
        /// P.2 Vermogen
        /// </summary>
        public string P2 { get; private set; }

        /// <summary>
        /// P.3 Brandstof
        /// </summary>
        public string P3 { get; private set; }

        /// <summary>
        /// Q Vermogen/massa
        /// </summary>
        public string Q { get; private set; }

        /// <summary>
        /// G Massa rijklaar
        /// </summary>
        public string G { get; private set; }

        /// <summary>
        /// S.1 Zitplaatsen
        /// </summary>
        public string S1 { get; private set; }

        /// <summary>
        /// S.2 Staanplaatsen
        /// </summary>
        public string S2 { get; private set; }

        /// <summary>
        /// Bevat 0 of meer CVO's in string XML formaat
        /// </summary>
        public string[] CVOs { get; private set; }

        /// <summary>
        /// The version number of the CVO data
        /// </summary>
        public string CVOVersion { get; private set; }
        #endregion

        public override void CreateSignature()
        {
            this.Signature = EFSignature.Create_Signature_A(this.AID, this.cardReader);    
        }

        public override void CreateDocumentSigner()
        {
            EFCIA_DS ds = EFCIA_DS.Create_DS_A(eVRCardReader.eVRCApplicatie, cardReader);

            this.DS = new X509Certificate2(ds.Value);
        }

        public override Encoding CharacterSetEncoding
        {
            get;
            set;
        }

        protected void SetEncoding(byte[] characterSet)
        {
            switch (characterSet[0])
            {
                case 0x00:
                    this.CharacterSetEncoding = Encoding.GetEncoding("iso-8859-1");
                    break;
                case 0x01:
                    this.CharacterSetEncoding = Encoding.GetEncoding("iso-8859-5");
                    break;
                case 0x02:
                    this.CharacterSetEncoding = Encoding.GetEncoding("iso-8859-7");
                    break;
                default:
                    throw new ArgumentException("Invalid characterset value");
            }
        }

        public RegistrationA(EFSOd EFSOd, X509Certificate2 CSCA, byte[] AID, CardReader cardReader)
            : base(EFSOd, CSCA, AID, cardReader, new byte[] { 0xD0, 0x01 })
        {
            this.SetEncoding(this.GetTag("1,71|1,9F37").Value);
            
            this.A = this.DecodeString("1,71|1,81");                // kenteken
            this.DocumentNumber = this.DecodeString("1,71|1,9F38"); // docNr
            this.C11 = this.DecodeString("1,71|1,A1|1,A2|1,83");    // naamHouder
            this.C12 = this.DecodeString("1,71|1,A1|1,A2|1,84");    // voorletters
            this.C13 = this.DecodeString("1,71|1,A1|1,A2|1,85");    // adresHouder
            this.C4 = this.DecodeString("1,71|1,A1|1,86");          // eigendom
            this.E = this.DecodeString("1,71|1,8A");                // voertuigidentificatienr
            
            // Determine meldcode from the voertuigidentificatienr number (last 4 digits; digits!)
            this.A_Meldcode = EVR.Utils.Helper.ExtractMeldcode(this.E);

            this.D1 = this.DecodeString("1,71|1,A3|1,87");          // merk
            this.D2 = this.DecodeString("1,71|1,A3|1,88");          // type
            this.D3 = this.DecodeString("1,71|1,A3|1,89");          // handelsbenaming

            this.K = this.DecodeString("1,71|1,8F");                // typegoedkeuringsnr
            this.F1 = this.DecodeString("1,71|1,A4|1,8B");          // techMaxMassa
            this.G = this.DecodeString("1,71|1,8C");                // massaRijklaar
            this.S1 = this.DecodeString("1,71|1,A6|1,94");          // zitplaatsen
            this.S2 = this.DecodeString("1,71|1,A6|1,95");          // staanplaatsen
            this.P1 = this.DecodeString("1,71|1,A5|1,90");          // cilinderinhoud
            this.P2 = this.DecodeString("1,71|1,A5|1,91");          // vermogen
            this.P3 = this.DecodeString("1,71|1,A5|1,92");          // brandstofEU
            this.Q = this.DecodeString("1,71|1,93");                // vermogenGedeeldRijklaar
        }
    }
}

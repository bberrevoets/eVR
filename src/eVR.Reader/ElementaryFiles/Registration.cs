/*
Copyright (c) 2013, Dienst Wegverkeer, RDW, All rights reserved. 

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 

• Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
• Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 
• Neither the name of the Dienst Wegverkeer, RDW,  nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. 

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

// <auto-generated />
namespace EVR.Reader
{
    using System.Linq;
    using System.Security.Cryptography;
    using System.Security.Cryptography.X509Certificates;
    using EVR.Utils;
    using System.Text;
    using System;
    using System.Diagnostics;

    public abstract class Registration : ElementaryFile
    {
        ///// <summary>
        ///// Send messages to this trace source.
        ///// </summary>
        private static TraceSource TS = new TraceSource("Registration");

        public EFSOd EFSOd
        {
            get;
            private set;
        }

        public X509Certificate2 CSCA
        {
            get;
            private set;
        }

        public X509Certificate2 DS
        {
            get;
            protected set;
        }

        public EFSignature Signature
        {
            get;
            protected set;
        }

        public bool CRLCheckEnabled
        {
            get;
            set;
        }
        public bool SignatureValid
        {
            get
            {
                if (this.CSCA == null || this.DS == null || this.Signature == null)
                {
                    //// Validation cannot be peformed when CSCA, DS or Signature is null
                    return false;
                }

                if (CRLCheckEnabled) //// Check enabled
                {
                    TS.TraceI("Checking revocation status certificate.");
                    X509Chain chain509 = new X509Chain();
                    chain509.ChainPolicy.RevocationMode = System.Security.Cryptography.X509Certificates.X509RevocationMode.Online;
                    chain509.ChainPolicy.UrlRetrievalTimeout = new TimeSpan(0, 0, 10);

                    TS.TraceI("X509RevocationMode check is online.");
                    if (!chain509.Build(this.DS))
                    {
                        foreach (var certStatus in chain509.ChainStatus)
                        {
                            TS.TraceV("chain509.Chainstatus = \"{0}\", chain509.Chainstatus Information = \"{1}\".", certStatus.Status, certStatus.StatusInformation);
                            if (string.Compare(certStatus.Status.ToString().ToUpper(), "REVOKED") == 0)
                            {                                
                                return false;
                            }                            
                        }
                    }
                }
                
                /*
                 * 4.3 Lezen en verifiëren van buitenlandse kentekenkaart chips
                 *      1 Selecteer eVRC applicatie (AID = ‘A0 00 00 04 56 45 56 52 2D 30 31’)
                 *          Zie constructor
                 *      2 Selecteer EF.C.IA_A.DS (File ID = ‘C0 01’)
                 *          Zie constructor
                 *      3 Lees EF.C.IA_A.DS (lengte = ‘LL LL’)
                 *          Zie constructor
                 *      4 Controleer DS certificaat uit EF.C.IA_A.DS
                 *        a. DS certificaat profiel voldoet aan CP/CPS
                 *           - Niet geimplementeerd
                 *        b. DS certificaat is niet verlopen
                 *           - Wel geimplementeerd
                 *        c. DS certificaat komt niet voor op CRL
                 *           - Niet geimplementeerd
                 *        d. DS certificaat is uitgegeven door CSCA
                 */
                if (string.Compare(Helper.GetAuthorityKeyIdentifier(this.CSCA), Helper.GetAuthorityKeyIdentifier(this.DS)) != 0)
                {
                    return false;
                }

                ////     4b. DS Certificaat is niet verlopen
                ////          Certifcaat valid to date ligt na huidige datum
                if (DateTime.Now > this.DS.NotAfter || DateTime.Now < this.DS.NotBefore)
                {
                    return false;
                }

                /*
                 * 5. Selecteer EF.Signature_A
                 *      Zie constructor
                 * 6. Lees EF.Signature_A
                 *      Zie constructor
                 * 7. ‘Controleer’/’ontcijfer’ handtekening uit EF.Signature_A met public key uit DS certificaat
                 */
                byte[] descipheredSignature = Helper.Decrypt(this.DS, this.Signature.Signature.Value).Reverse().Take(32).Reverse().ToArray();
                /*
                 * 8. Selecteer EF.Registration_A (‘D0 01’)
                 *      Zie constructor
                 * 9. Lees EF.Registration_A
                 *      Zie constructor
                 * 10. Controleer authenticiteit EF.Registration_A
                 *      a. Bereken hash over EF.Registration_A
                 *      b. Vergelijk hash waarden
                 */
                HashAlgorithm hashAlgoritm = this.EFSOd.RDWIdsSecurityObjectHashAlgorithm;
                byte[] hashedRegistration = hashAlgoritm.ComputeHash(this.Value);

                if (!Helper.CompareByteArrays(descipheredSignature, hashedRegistration))
                {
                    return false;
                }

                return true;
            }
        }

        public virtual bool PassiveAuthentication
        {
            get
            {
                if (this.EFSOd == null)
                {
                    //// SOd is needed for passive authentication
                    return false;
                }

                ////  Voor alle controles op de hash onder punt 3 en 4 geldt dat het hashing algoritme hier staat:
                ////          T:'30' (RDWIdsSecurityObject)
                ////               T:'30' (hashAlgorithm)
                ////                    T:'06' (algorithm)
                HashAlgorithm hashAlgoritm = this.EFSOd.RDWIdsSecurityObjectHashAlgorithm;

                ////    a. Selecteer EF
                ////    b. Lees EF == this instance
                ////    c. Controleer authenticiteit EF (Passive authentication (2e deel))
                ////       i. Bereken hash over EF
                byte[] hashedEF = hashAlgoritm.ComputeHash(this.Value);

                ////      ii. Haal hash waarde uit RDWIdsSecurityObject
                ////          De hash waarde van EF bevindt zich onder:
                ////          T:'30' (RDWIdsSecurityObject)
                ////               T:'30' (dataGroupHashValues)
                ////                    T:'04' (dataGroupFileIdentifier)
                ////                         V: this.FileID
                ////                    T:'04' (dataGroupHashValue)
                byte[] hashEF = this.EFSOd.GetDataGroupHashValue(this.FileID);

                ////////     iii. Vergelijk de hash-waarden
                ////          Indien de hash waarde uit RDWIdsSecurityObject overeenkomt met de berekende hash over EF uit i. is
                ////          de data in EF authentiek en kan aan de gebruiker getoond worden.
                ////    d. Toon EF data aan gebruiker
                return Helper.CompareByteArrays(hashedEF, hashEF);
            }
        }

        public abstract void CreateSignature();

        public abstract void CreateDocumentSigner();

        /*
         * Constructor when nog DS and Signature are stored for a registration (ie Registration C at the moment)
         */
        public Registration(EFSOd EFSOd, X509Certificate2 CSCA, byte[] AID, CardReader cardReader, byte[] FileID)
            :base(AID, cardReader,FileID)
        {
            this.EFSOd = EFSOd;
            this.CSCA = CSCA;
            CreateSignature();
            CreateDocumentSigner();
        }
    }
}
